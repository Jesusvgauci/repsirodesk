package ui

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.platform.LocalClipboardManager
import androidx.compose.ui.text.AnnotatedString
import androidx.compose.ui.unit.dp
import calculators.evaluateLight
import kotlinx.coroutines.launch

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LightScreen() {
    var serumProtein by remember { mutableStateOf("") }
    var pleuralProtein by remember { mutableStateOf("") }
    var serumLDH by remember { mutableStateOf("") }
    var pleuralLDH by remember { mutableStateOf("") }
    var serumLDH_ULN by remember { mutableStateOf("") }
    var result by remember { mutableStateOf<String?>(null) }

    val clipboardManager = LocalClipboardManager.current
    val snackbarHostState = remember { SnackbarHostState() }
    val scope = rememberCoroutineScope()
    val scrollState = rememberScrollState()

    Scaffold(
        snackbarHost = { SnackbarHost(snackbarHostState) }
    ) { innerPadding ->
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(scrollState)
                .padding(innerPadding)
                .padding(16.dp),
            verticalArrangement = Arrangement.spacedBy(16.dp)
        ) {
            // üîπ InfoCard ‚Äì vysvetlenie
            InfoCard(
                text = "Lightove krit√©ri√° sa pou≈æ√≠vaj√∫ na urƒçenie typu pleur√°lneho v√Ωpotku u pacienta a t√Ωm dopom√¥c≈• k urƒçeniu etiol√≥gie. " +
                        "Pam√§tajte, ≈æe s√∫ vysoko senzit√≠vne (98 %) ale menej ≈°pecifick√© (83 %)."
            )

            // ‚úÖ Prehƒæad krit√©ri√≠ ‚Äì tie≈æ m√¥≈æeme da≈• do InfoCard
            InfoCard(
                text = """
                    Lightove krit√©ri√° (ak aspo≈à 1 splnen√©):
                    ‚Ä¢ Pleur√°lny prote√≠n / s√©rov√Ω prote√≠n > 0.5
                    ‚Ä¢ Pleur√°lny LDH / s√©rov√Ω LDH > 0.6
                    ‚Ä¢ Pleur√°lny LDH > 2/3 hornej hranice normy LDH
                """.trimIndent()
            )

            OutlinedTextField(
                value = serumProtein,
                onValueChange = { serumProtein = it },
                label = { Text("S√©rum prote√≠ny (g/dL)") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = pleuralProtein,
                onValueChange = { pleuralProtein = it },
                label = { Text("Pleur√°lne prote√≠ny (g/dL)") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = serumLDH,
                onValueChange = { serumLDH = it },
                label = { Text("S√©rum LDH (U/L)") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = pleuralLDH,
                onValueChange = { pleuralLDH = it },
                label = { Text("Pleur√°lny LDH (U/L)") },
                modifier = Modifier.fillMaxWidth()
            )

            OutlinedTextField(
                value = serumLDH_ULN,
                onValueChange = { serumLDH_ULN = it },
                label = { Text("Horn√° hranica normy LDH (U/L)") },
                modifier = Modifier.fillMaxWidth()
            )

            Button(
                onClick = {
                    val sp = serumProtein.toDoubleOrNull()
                    val pp = pleuralProtein.toDoubleOrNull()
                    val sLDH = serumLDH.toDoubleOrNull()
                    val pLDH = pleuralLDH.toDoubleOrNull()
                    val sLDH_ULNval = serumLDH_ULN.toDoubleOrNull()

                    if (sp != null && pp != null && sLDH != null && pLDH != null && sLDH_ULNval != null) {
                        val res = evaluateLight(sp, pp, sLDH, pLDH, sLDH_ULNval)
                        result = res.explanation.joinToString("\n")
                    } else {
                        result = "Zadajte v≈°etky hodnoty (s√©rum/pleur√°lne prote√≠ny, LDH a horn√° hranica normy LDH)."
                    }
                },
                modifier = Modifier.fillMaxWidth()
            ) {
                Text("Vyhodnoti≈•")
            }

            // üîπ V√Ωsledok cez ResultCard
            result?.let { r ->
                ResultCard(
                    text = r,
                    onCopy = { copied ->
                        clipboardManager.setText(AnnotatedString(copied))
                        scope.launch {
                            snackbarHostState.showSnackbar("Skop√≠rovan√© do schr√°nky")
                        }
                    }
                )
            }
        }
    }
}
