package ui

import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import calculators.ABGAnalysisResult
import calculators.analyzeABG

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ABGScreen()  {
    var ph by remember { mutableStateOf("") }
    var paco2Kpa by remember { mutableStateOf("") } // ‚úÖ vstup v kPa
    var hco3 by remember { mutableStateOf("") }
    var na by remember { mutableStateOf("") }
    var cl by remember { mutableStateOf("") }
    var albumin by remember { mutableStateOf("") }

    // ‚úÖ Tri-stav: null = ne≈°pecifikovan√©, 0 = ak√∫tna, 1 = chronick√°
    var respType: Int? by remember { mutableStateOf<Int?>(null) }

    var result by remember { mutableStateOf<String?>(null) }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp),
        verticalArrangement = Arrangement.spacedBy(16.dp)
    ) {
        InfoCard(
            text = "Interpret√°cia acidob√°zickej rovnov√°hy (ABR) je kalkul√°tor, ktor√©ho cieƒæom je urƒçi≈•, ƒçi m√° pacient poruchu pH vn√∫torn√©ho prostredia a ak√Ω je jej typ a z√°va≈ænos≈•. Vyhodnocuje sa na z√°klade v√Ωsledkov krvn√Ωch plynov (pH, pCO‚ÇÇ, HCO‚ÇÉ‚Åª, BE) a ƒçasto aj elektrolytov."
        )

        OutlinedTextField(
            value = ph,
            onValueChange = { ph = it },
            label = { Text("pH") },
            modifier = Modifier.fillMaxWidth()
        )
        OutlinedTextField(
            value = paco2Kpa,
            onValueChange = { paco2Kpa = it },
            label = { Text("PaCO‚ÇÇ (kPa)") }, // ‚úÖ kPa
            modifier = Modifier.fillMaxWidth()
        )
        OutlinedTextField(
            value = hco3,
            onValueChange = { hco3 = it },
            label = { Text("HCO‚ÇÉ‚Åª (mmol/L)") },
            modifier = Modifier.fillMaxWidth()
        )

        OutlinedTextField(
            value = na,
            onValueChange = { na = it },
            label = { Text("Na‚Å∫ (mmol/L) ‚Äì voliteƒæn√©") },
            modifier = Modifier.fillMaxWidth()
        )
        OutlinedTextField(
            value = cl,
            onValueChange = { cl = it },
            label = { Text("Cl‚Åª (mmol/L) ‚Äì voliteƒæn√©") },
            modifier = Modifier.fillMaxWidth()
        )
        OutlinedTextField(
            value = albumin,
            onValueChange = { albumin = it },
            label = { Text("Album√≠n (g/L) ‚Äì voliteƒæn√©") },
            modifier = Modifier.fillMaxWidth()
        )

        // üü¢ V√Ωber ak√∫tna / chronick√° s mo≈ænos≈•ou od≈°krtnutia
        Text("Typ respiraƒçnej poruchy (voliteƒæn√©)", style = MaterialTheme.typography.titleMedium)
        SingleChoiceSegmentedButtonRow {
            SegmentedButton(
                selected = respType == 0,
                onClick = { respType = if (respType == 0) null else 0 },
                shape = SegmentedButtonDefaults.itemShape(index = 0, count = 2),
                colors = SegmentedButtonDefaults.colors(
                    activeContainerColor = MaterialTheme.colorScheme.primary,
                    activeContentColor = MaterialTheme.colorScheme.onPrimary,
                    inactiveContainerColor = MaterialTheme.colorScheme.surface,
                    inactiveContentColor = MaterialTheme.colorScheme.onSurface
                ),
                label = { Text("Ak√∫tna") }
            )
            SegmentedButton(
                selected = respType == 1,
                onClick = { respType = if (respType == 1) null else 1 },
                shape = SegmentedButtonDefaults.itemShape(index = 1, count = 2),
                colors = SegmentedButtonDefaults.colors(
                    activeContainerColor = MaterialTheme.colorScheme.primary,
                    activeContentColor = MaterialTheme.colorScheme.onPrimary,
                    inactiveContainerColor = MaterialTheme.colorScheme.surface,
                    inactiveContentColor = MaterialTheme.colorScheme.onSurface
                ),
                label = { Text("Chronick√°") }
            )
        }

        Button(
            onClick = {
                val phVal = parseDoubleOrNull(ph)
                val paco2KpaVal = parseDoubleOrNull(paco2Kpa)
                val hco3Val = parseDoubleOrNull(hco3)
                val naVal = parseDoubleOrNull(na)
                val clVal = parseDoubleOrNull(cl)
                val albValGL = parseDoubleOrNull(albumin) // g/L

                if (phVal != null && paco2KpaVal != null && hco3Val != null) {
                    val res: ABGAnalysisResult = analyzeABG(
                        ph = phVal,
                        paCO2_kPa = paco2KpaVal, // ‚úÖ vstup v kPa
                        hco3 = hco3Val,
                        na = naVal,
                        cl = clVal,
                        albumin_g_per_L = albValGL,
                        respType = respType // null/0/1 ‚Äì prenesie sa do logiky
                    )
                    result = buildString {
                        appendLine("üìå Prim√°rna porucha: ${res.primaryDisorder}")
                        res.expectedPaCO2_kPa?.let {
                            appendLine("üå° Oƒçak. PaCO‚ÇÇ: ${"%.2f".format(it)} kPa")
                        }
                        res.expectedHCO3?.let {
                            appendLine("üß™ Oƒçak. HCO‚ÇÉ‚Åª: ${"%.1f".format(it)} mmol/L")
                        }
                        res.anionGap?.let {
                            appendLine("üßÆ Ani√≥nov√° medzera: ${"%.1f".format(it)} mmol/L")
                        }
                        res.anionGapCorrected?.let {
                            appendLine("üßÆ AG (korig.): ${"%.1f".format(it)} mmol/L")
                        }
                        if (res.notes.isNotEmpty()) {
                            appendLine("\nPozn√°mky:")
                            res.notes.forEach { appendLine("‚Ä¢ $it") }
                        }
                    }
                } else {
                    result = "Zadajte platn√© hodnoty pH, PaCO‚ÇÇ (kPa) a HCO‚ÇÉ‚Åª."
                }
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Vyhodnoti≈•")
        }

        result?.let {
            Surface(
                tonalElevation = 2.dp,
                shape = MaterialTheme.shapes.medium,
                color = MaterialTheme.colorScheme.primaryContainer,
                modifier = Modifier.fillMaxWidth()
            ) {
                Text(
                    text = it,
                    style = MaterialTheme.typography.bodyMedium,
                    color = MaterialTheme.colorScheme.onPrimaryContainer,
                    modifier = Modifier.padding(16.dp)
                )
            }
        }
    }
}

/** Helper na akceptovanie bodky aj ƒçiarky */
private fun parseDoubleOrNull(s: String): Double? =
    s.trim().replace(',', '.').toDoubleOrNull()

/** Jednoduch√° info kartiƒçka ‚Äì nech je komponent sebestaƒçn√Ω */
@Composable
private fun InfoCard(text: String) {
    Surface(
        tonalElevation = 2.dp,
        shape = MaterialTheme.shapes.medium,
        modifier = Modifier.fillMaxWidth()
    ) {
        Text(
            text = text,
            style = MaterialTheme.typography.bodyMedium,
            modifier = Modifier.padding(16.dp)
        )
    }
}
